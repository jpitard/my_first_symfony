<?php

namespace AdminBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll() {

        // Creation d'une requête DQL
        // findAll() maison
        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT prod
                          FROM AdminBundle:Product prod
                    ');
        //die(dump($query->getResult()));


//        $query = $this->getEntityManager()->createQueryBuilder()
//            ->select("prod")
//            ->from("AdminBundle:Product", "prod")
//            ->getQuery();
//
//        die(dump($query->getResult()));
        die($query);
    }


    public function myFind($id) {

        // Creation d'une requête DQL
        // find() maison
        $query = $this->getEntityManager()
            ->createQuery('
                    			SELECT prod
                          FROM AdminBundle:Product prod
                          WHERE prod.id = :identifiant
                    ')
            ->setParameter('identifiant', $id);

        die(dump($query->getScalarResult()));

        /* Plusieurs paramètres
        ->setParameters([
                'identifiant' => $id,
            'autre_variable' => $autre
        ])
        */

        //die(dump($query->getResult()));

        // Création d'une requête grâce au builder
        // findAll() maison
       /* $query = $this->getEntityManager()->createQueryBuilder()
            ->select("prod")
            ->from("AdminBundle:Product", "prod")
            ->getQuery();*/

        //die(dump($query->getResult()));

        //return $query->getResult();
    }
    public function myFindInfFive() {

        $query = $this->getEntityManager()
            ->createQuery('
                    			SELECT prod
                          FROM AdminBundle:Product prod
                          WHERE prod.quantity < 10
                          
                    ');
        die(dump($query->getResult()));

    }

    public function myFindProductCountQuantZero() {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT count(prod)
                          FROM AdminBundle:Product prod
                          WHERE prod.quantity = 0
                    ');
        die(dump($query->getResult()));

    }
    public function myFindQuantityTotal() {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT  SUM(prod.quantity)
                          FROM AdminBundle:Product prod
                          
                    ');
        die(dump($query->getResult()));

    }

    public function myFindPrixMaxAndMin() {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT  MAX(prod.price) 
                          FROM AdminBundle:Product prod
                          
                    ');
        die(dump($query->getResult()));

    }

    //createQueryBuilder equivalent du findAll
    // plusieurs requetes (sur lentité lui meme et les autres entités qui lui est rattachée)
    public function findProduct() {

        //
        $results = $this
            ->createQueryBuilder('product')
            ->getQuery()
            ->getResult()
            ;

        dump($results);exit;

        //die(dump($query->getResult()));

    }

    //utilisation de SELECT Casse le comportement de requete et sous requetes
    public function findProductWhere() {
        //
        $results = $this
            ->createQueryBuilder('product')
            ->select('product.description, product.price')
           //->setMaxResults(2)
           //->setFirstResult(1)
            ->where('product.description = :desc')
            ->setParameters([
                'desc'=>'description test load1'
            ])
            ->getQuery()
            ->getResult()
        ;

       // dump($results);exit;

        //die(dump($query->getResult()));

    }

    public function findProductJointure() {
        //
        $results = $this
            ->createQueryBuilder('product')
            ->select('product.description, product.price, marque.title')
            ->join('product.marque', 'marque')
            //->setMaxResults(2)
            //->setFirstResult(1)
            ->where('product.price > :price')
            ->andWhere('product.description = :desc')
            ->andWhere('marque.title LIKE :marque')
            ->setParameters([
               'desc' => 'description test load1',
                'price' => 10,
                'marque' => '%brand%',
            ])
            ->getQuery()
            ->getResult()
        ;

        dump($results);exit;

        //die(dump($query->getResult()));

    }

    public function findProductCount() {
        //
        $results = $this
            ->createQueryBuilder('product')
            ->select('COUNT(product.id) result')

            ->getQuery()
            ->getSingleScalarResult()
           // ->getResult()
        ;

        //dump($results);exit;

        //die(dump($query->getResult()));

    }


    public function findProductLimitPrice() {

        //
        $results = $this
            ->createQueryBuilder('product')
            ->orderBy('product.price', 'DESC')
            ->setMaxResults(6)
            ->getQuery()
            ->getResult()
        ;
        //dump($results);exit;

        return $results;
    }

    public function findProductLimitCarousel() {

        //
        $results = $this
            ->createQueryBuilder('product')
            ->orderBy('product.quantity', 'DESC')
            ->setMaxResults(3)
            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    /*public function myFindProductionSelonCategorie($categorie_id, $offset) {
        $results = $this
            ->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->where('c.id = :idCat')
            ->setParameters(['idCat' => $categorie_id])
            ->setFirstResult($offset)
            ->setMaxResults(4)
            ->getQuery()
            ->getResult();
        return $results;
    }*/

    public function FindProductsByCategoryCount($categorie_id) {
        $results = $this
            ->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->where('c.id = :idCat')
            ->setParameters(['idCat' => $categorie_id])
            ->getQuery()
            ->getResult();
        return $results;
    }

    public function myFindProductionSelonCategorie($categorie_id) {
        $results = $this
            ->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->where('c.id = :idCat')
            ->setParameters(['idCat' => $categorie_id])
            ->getQuery()
            ->getResult();
        return $results;
    }

    public function findProductByLocale($id, $locale) {
        $locale = mb_strtoupper($locale);
        $results = $this
            ->createQueryBuilder('p')
            ->select('p.id', "p.title$locale AS title", "p.description$locale AS description")
            ->where('p.id = :id')
            ->setParameters([
                'id' => $id
            ])
            ->getQuery()
            ->getOneOrNullResult();
        return $results;
    }




}
